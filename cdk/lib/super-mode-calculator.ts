import {GuScheduledLambda} from "@guardian/cdk";
import type { GuStackProps } from '@guardian/cdk/lib/constructs/core';
import {GuStack, GuStringParameter} from '@guardian/cdk/lib/constructs/core';
import {type App, Duration, RemovalPolicy} from 'aws-cdk-lib';
import {AttributeType, BillingMode, Table} from "aws-cdk-lib/aws-dynamodb";
import { Schedule } from 'aws-cdk-lib/aws-events';
import { PolicyStatement, Role, ServicePrincipal} from 'aws-cdk-lib/aws-iam';
import { Runtime } from 'aws-cdk-lib/aws-lambda';

const appName = 'super-mode-calculator-app';
export class SuperModeCalculator extends GuStack {
	constructor(scope: App, id: string, props: GuStackProps) {
		super(scope, id, props);

		const scheduleState = new GuStringParameter(this, 'ScheduleState', {
			description: 'The state of the schedule',
			default: 'ENABLED',
			allowedValues: ['ENABLED', 'DISABLED'],
		});

		const scheduleRules =
			scheduleState.valueAsString === 'ENABLED'
				? [
					{
						schedule: Schedule.rate(Duration.minutes(60)),
					},
				]
				: [];

		const superModeCalculatorTable = new Table(this, 'super-mode-calculator-table', {
			tableName: `super-mode-${this.stage}`,
			removalPolicy: RemovalPolicy.RETAIN,
			billingMode: BillingMode.PROVISIONED,
			partitionKey: {
				name: 'id',
				type: AttributeType.STRING,
			},
			sortKey: {
				name: 'startTimestamp',
				type: AttributeType.STRING,
			},
			pointInTimeRecovery: this.stage === 'PROD',
		});



		const role = new Role(this, 'query-lambda-role', {
			// Set the name of the role rather than using an autogenerated name.
			// This is because if the ARN is too long then it breaks the authentication request to GCP
			roleName: `${appName}-${this.stage}`,
			assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
		});
		role.addToPolicy(
			// Logging permissions
			new PolicyStatement({
				actions: [
					'logs:CreateLogGroup',
					'logs:CreateLogStream',
					'logs:PutLogEvents',
				],
				resources: ['*'],
			}),
		);
		role.addToPolicy(
			// Permission to read config from Parameter Store
			new PolicyStatement({
				actions: ['ssm:GetParameter'],
				resources: [
					`arn:aws:ssm:${this.region}:${this.account}:parameter/super-mode-calculator/${this.stage}/gcp-wif-credentials-config`,
				],
			}),
		);
		role.addToPolicy(
				new PolicyStatement({
					actions: ['dynamodb:BatchWriteItem'],
					resources: [superModeCalculatorTable.tableArn],
				}),
		);

		new GuScheduledLambda(this, 'SuperModeCalculator', {
			app: appName,
			functionName: `${appName}-${this.stage}`,
			runtime: Runtime.NODEJS_20_X,
			handler: 'super-mode-calculator/src/lambdas/lambda.handler',
			fileName: `${appName}.zip`,
			rules: scheduleRules,
			role,
			monitoringConfiguration:
				this.stage === 'PROD'
					? {
						toleratedErrorPercentage: 0,
						snsTopicName: 'alarms-handler-topic-PROD',
					}
					: { noMonitoring: true },
		});
	}
}
