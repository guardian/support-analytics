AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: support component events stream api

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: support
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
      - CODE
      - PROD
  CertificateArn:
    Description: ARN of the certificate
    Type: String

Mappings:
  StageMap:
    CODE:
      DomainName: component-events-code.support.guardianapis.com
      CorsOrigin: "'*'"
    PROD:
      DomainName: component-events.support.guardianapis.com
      CorsOrigin: "'https://www.theguardian.com'"

Conditions:
  IsProd: !Equals [ !Ref Stage, "PROD" ]

Globals:
  Api:
    Cors:
      AllowOrigin: !FindInMap [ StageMap, !Ref Stage, CorsOrigin ]
      AllowHeaders: "'Content-Type'"
      AllowMethods: "'*'"

Resources:
  EpicViewEventStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub support-epic-view-event-stream-${Stage}
      RetentionPeriodHours: 24
      ShardCount: 1

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: StreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:*
                Resource: !GetAtt EpicViewEventStream.Arn

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        x-amazon-apigateway-request-validators:
          body-only:
            validateRequestBody: true
            validateRequestParameters: false
        x-amazon-apigateway-request-validator: body-only
        paths:
          "/epic-view":
            "post":
              x-amazon-apigateway-request-validator: body-only
              parameters:
                - in: body
                  name: RequestBodyModel
                  required: true
                  schema:
                    $ref: "#/definitions/RequestBodyModel"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayRole.Arn
                httpMethod: "POST"
                requestParameters:
                  "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: !Sub "#set($payload = \"$input.json('$')\n\") \n {\n    \"StreamName\": \"support-epic-view-event-stream-${Stage}\",\n    \"Records\": [\n{ \"Data\": \"$util.base64Encode($payload)\", \"PartitionKey\": \"1\"\n }\n]\n}"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      "application/json": "#set($inputRoot = $input.path('$'))"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: !FindInMap [ StageMap, !Ref Stage, CorsOrigin ]
                passthroughBehavior: when_no_match
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecords"
        definitions:
          RequestBodyModel:
            type: object
            properties:
              url:
                type: string
              countryCode:
                type: string
            required: [ url, countryCode ]
          Error:
            type: object

  DomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      RegionalCertificateArn: # only for *.support.guardianapis.com
        !Ref CertificateArn
      DomainName: !FindInMap [ StageMap, !Ref Stage, DomainName ]
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      RestApiId: !Ref ApiGateway
      DomainName: !Ref DomainName
      Stage: !Sub Prod
    DependsOn: ApiGatewayProdStage # auto generated by the Transform

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: support.guardianapis.com.
      Name: !FindInMap [ StageMap, !Ref Stage, DomainName ]
      Comment: !Sub CNAME for support component events stream API ${Stage}
      Type: CNAME
      TTL: '120'
      ResourceRecords:
        - !GetAtt [ DomainName, RegionalDomainName ]

